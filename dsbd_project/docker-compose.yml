version: '2'

networks:
  python-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - python-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - python-network

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic promethuesdata --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - python-network

  db:
    image: mysql:latest
    container_name: db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "kofr.VBnA.462"
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - python-network

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    networks:
      - python-network

  etl_data_pipeline:
    build:
      context: .
      dockerfile: ./etl_data_pipeline/Dockerfile
    command: python ./etl_data_pipeline/main_etl.py
    ports:
      - "5000:5000"
    volumes:
      - .:/etl_data_pipeline
    networks:
      - python-network
    restart: always

  data_storage:
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: "kofr.VBnA.462"
    build:
      context: .
      dockerfile: ./data_storage/Dockerfile
    ports:
      - "5001:5000"
    volumes:
      - .:/data_storage
    networks:
      - python-network
    command: python ./data_storage/main_data_storage.py
    restart: on-failure

  data_retrieval:
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: "kofr.VBnA.462"
    build:
      context: .
      dockerfile: ./data_retrieval/Dockerfile
    ports:
      - "5002:5000"
    volumes:
      - .:/data_retrieval
    networks:
      - python-network
    command: python ./data_retrieval/main_data_retrieval.py
    restart: always



